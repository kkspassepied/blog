<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Activity Logs</title>
    <link>https://kkspassepied.github.io/blog/tags/unity/</link>
    <description>Recent content in Unity on Activity Logs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 20 Mar 2022 05:37:00 +0000</lastBuildDate><atom:link href="https://kkspassepied.github.io/blog/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第十一回「演習３」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220320/</link>
      <pubDate>Sun, 20 Mar 2022 05:37:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220320/</guid>
      <description>概要  場所  Discoards   日時  2022/03/17 21:00 - 22:50   お題  「演習問題しましょ３」    詳細 演習 void Start() { // 問題  // ・貫通弾Lv1を60発所持している  // ・貫通弾Lv1を4発装填できるボウガンを使う  // スペースキーを押したとき「射撃」  // Rキーを押したときに「リロード」  // するプログラムを作ろう  // ## Step1 ## : 必要な変数を定義する  void Start() { // ## Step2 ## : 必要な変数を初期化する  } void Update() { if (Input.GetKeyDown(&amp;#34;space&amp;#34;)) { // ## Step3 ## : スペースキーを押したときの処理を追加する  // ・装填数が0の場合は&amp;#34;リロードしてください&amp;#34;を表示  // ・装填数 &amp;gt; 0の場合は、装填数を1つ消費した後、&amp;#34;発射！装填数残りxx発&amp;#34;を表示  } else if (Input.</description>
    </item>
    
    <item>
      <title>第十回「演習２」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220310/</link>
      <pubDate>Thu, 10 Mar 2022 13:00:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220310/</guid>
      <description>概要  場所  Discoards   日時  2022/03/10 22:00 - 22:50   お題  「演習問題しましょ２」    詳細 演習 void Start() { void Start() { // 貫通弾Lv1を全弾撃つ過程で、以下を表示しよう  // 弾は1発ずつ発射 -&amp;gt; 装填数が０になったらリロード  // を繰り返します。  // ・貫通弾Lv1を60発所持している  // ・ライトボウガンには6発ずつ装填できる  // 1. &amp;#34;貫通弾は残りxx発です&amp;#34; (※所持数)  // 2. &amp;#34;装填数は残りxx発です&amp;#34; (※ライトボウガンに装填されている数)  // 3. 装填数 == 0 の時に&amp;#34;リロードします&amp;#34;  // ------------------------------------------------------------  /* 参考：前回のやつ for(int i = 50; i &amp;gt;= 0; i--){ Debug.</description>
    </item>
    
    <item>
      <title>第九回「演習」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220306/</link>
      <pubDate>Sun, 06 Mar 2022 01:00:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220306/</guid>
      <description>概要  場所  Discoards   日時  2022/03/06 10:00 - 10:50   お題  「演習問題しましょ」    詳細 演習 void Start() { // 強撃ビン × 50 撃てる弓がある  // for文で、1発ずつ撃って「残り○○発です」を表示するプログラムを作ってください。  // for(変数宣言；条件；変数更新) {  // 処理  // }  // if(条件){  // 処理  // }  } ポイント  ０から全部書いてもらう演習とした エラーが出たらその内容をチェックして修正するを繰り返してみた  次回 2022/03/10 予定</description>
    </item>
    
    <item>
      <title>第八回「配列」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220227/</link>
      <pubDate>Sun, 27 Feb 2022 01:00:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220227/</guid>
      <description>概要  場所  Discoards   日時  2022/02/27 10:00 - 10:50   お題  「配列の話」    詳細 配列 void Start() { // 変数 = 1個の箱  int box = 0; // 配列 = n個の箱  // プレイヤーの名前の配列  string[] player = new string[4]; player[0] = &amp;#34;極みさん&amp;#34;; player[1] = &amp;#34;ぱすぴえ&amp;#34;; player[2] = &amp;#34;player3&amp;#34;; player[3] = &amp;#34;player4&amp;#34;; // 何かしらの回数をカウントする配列（スリンガーの回数）  int[] slinger = new int[4]; slinger[0] = 42; // 極みさん  slinger[1] = 3; // ぱすぴえ  slinger[2] = 42; // player3  slinger[3] = 23; // player4  // 実際のゲーム中ではスリンガー数をカウントしておくイメージ  // 極みさん -&amp;gt; slinger[0]++;  // ぱすぴえ -&amp;gt; slinger[1]++;  // player3 -&amp;gt; slinger[2]++;  // player4 -&amp;gt; slinger[3]++;  // 問題：スリンガー回数が一番多い人を表示しましょう（ワールドのリザルト風）  // ヒント：player[x]とslinger[x]のxは対応してある  // step1 : slinger回数の最大の数を探して、変数に入れる  int max = 0; for(int i = 0; i &amp;lt; 4; i++){ if(xxxxxxxxxxxx) { max = slinger[i]; } } // step2 : 最大の数と同じslinger回数のひとを表示する  for (int i = 0; i &amp;lt; 4; i++){ if (xxxxxxxxxxxx){ Debug.</description>
    </item>
    
    <item>
      <title>第七回「メソッド」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220223/</link>
      <pubDate>Wed, 23 Feb 2022 13:45:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220223/</guid>
      <description>概要  場所  Discoards   日時  2022/02/23 21:50 - 22:50   お題  「メソッドの話」    詳細 メソッド // Start is called before the first frame update  void Start() { int damage = 0; damage = longSwardDamege(1, 1, 1); Debug.Log(damage); } // Update is called once per frame  void Update() { int damage = 0; damage = longSwardDamege(2, 1, 1); Debug.Log(damage); } // 引数  // 返り値  int longSwardDamege(int nikusitsu, int buki, int kireazi) { int damage = 0; // ダメージ計算（適当）  damage = buki * nikusitsu * kireazi; return damage; } ポイント  メソッドには引数と返り値がある 引数は変数のように型を定義する  定義した型の変数しか指定できない   メソッドは返り値を設定することができる  返り血ではない   StartとUpdateの役割の話もちょっとした  実はこれもメソッドなんだよ Startはシーン再生の最初に1回 Updateは繰り返し呼ばれる  詳細     丁度いい分量だったみたい  次回 2022/02/27 予定</description>
    </item>
    
    <item>
      <title>第六回「ループ文２」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220211/</link>
      <pubDate>Fri, 11 Feb 2022 12:45:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220211/</guid>
      <description>概要  場所  Discoards   日時  2022/02/11 21:45 - 22:50   お題  「ループ文」の復習と追加    詳細 ループ文復習 更新式にひと工夫 void Start() { // 問題1 : for文の復習 0~10の数字のうち、偶数を「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  // 概要 : for([変数の定義]; [条件分岐の条件]; [変数の更新]){  } for文とif文 void Start() { // 問題2 : for文の復習 1~10の数字のうち、偶数について「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  // : ※問題1とは異なりif文を使って、特定条件時のみ表示させる  // : a % b = (a/bの割り算のあまり)  // : 偶数は２で割り切れる数、つまり・・・  // 概要 : for([変数の定義]; [条件分岐の条件]; [変数の更新]){  for(int i = 0; i &amp;lt; 10; i++){ } } continue void Start() { // 問題3 : continueを使うと、ループの開始地点にワープしてループを一つ進める  // : continueを使って、1~10の数字のうち、偶数について「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  for(int i = 0; i &amp;lt; 10; i++){ if(?</description>
    </item>
    
    <item>
      <title>第五回「ループ文」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220130/</link>
      <pubDate>Sun, 30 Jan 2022 00:45:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220130/</guid>
      <description>概要  場所  Discoards   日時  2022/01/30 10:00 - 12:56   お題  「ループ文」    詳細 ループ文とは こんな形 void Start() { // 問題1 : for文の構成を知ろう  // 概要 : for文とは、条件を満たしている間同じ処理を繰り返す文です。  // : 書き方は、今までにやった「変数」と「条件分岐」を組み合わせたような感じ  // for([変数の定義]; [条件分岐の条件]; [変数の更新]){  for(int i = 0; i &amp;lt; 10; i++){ Debug.Log(&amp;#34;for文のループ&amp;#34;+i+&amp;#34;回目です&amp;#34;); } } ループでできること // 問題2 : for文でタイマーを作ってみよう  // ポイント : プログラムのカウントは0から行う事を意識  // ： 理解のためStartに実装、Updateの話はまた後  using System.</description>
    </item>
    
    <item>
      <title>第四回「これまでの復習」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220123/</link>
      <pubDate>Wed, 26 Jan 2022 12:49:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220123/</guid>
      <description>概要  場所  Discoards   日時  2022/01/26 21:45 - 22:56   お題  「変数」の復習 「条件分岐」の復習    詳細 前回の復習 書いてみよう void Start() { // 問題1 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 zinogre_hpを定義し5000を代入  // - int型の変数 rathian_hpを定義し5000を代入  // [条件分岐]  // - zinogre_hpとrathian_hpが同じHPの場合  // * &amp;#34;HPは互角だ！&amp;#34;とコンソールに表示  // - どちらかのhpが高い場合  // * &amp;#34;XXXX(モンスター名)の方が強い！&amp;#34;とコンソールに表示  } void Start() { // 問題2 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 otoshianaを定義し1を代入  // - int型の変数 sibirewanaを定義し1を代入  // [条件分岐]  // - otoshianaが0の場合  // * 何も表示しない  // - otoshianaが0以外の場合  // * &amp;#34;罠にかかっている！&amp;#34;とコンソールに表示しよう  // - sibirewanaが0の場合  // * 何も表示しない  // - sibirewanaが0以外の場合  // * &amp;#34;罠にかかっている！&amp;#34;とコンソールに表示しよう  // [注意]  // * &amp;#34;罠にかかっている！&amp;#34;は１回だけコンソールに表示されるようにしよう  } void Start() { // 問題3 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 zinogre_hpを定義し50を代入  // - int型の変数 masuiを定義し2を代入  // - int型の変数 trappingを定義し1を代入  // - int型の変数 otoshianaを定義し1を代入  // - int型の変数 sibirewanaを定義し0を代入  // [条件分岐]  // - ziogre_hpが50未満かつ、masuiが2以上かつ、trappingが１と等しい、otoshianaまたはsibirewanaが1と等しい場合  // * &amp;#34;ジンオウガを捕獲した！&amp;#34;とコンソールに表示しよう  // - 条件を満たさない場合  // * &amp;#34;まだ捕獲できない！&amp;#34;とコンソールに表示しよう  } 間違い探し void Start() { // 問題4 : 以下の条件を満たすプログラムを作ったつもりだったが、  // 期待通りの出力が出なかった。間違いを指摘しよう。  // [変数]  // - int型の変数 zinogre_hpを定義し0を代入  // [条件分岐]  // - zinogre_hpが500未満の時  // * &amp;#34;ジンオウガは捕獲可能だ！&amp;#34;とコンソールに表示  // - zinogre_hpが0以下の時  // * &amp;#34;ジンオウガを倒した！&amp;#34;とコンソールに表示  // - それ以外の場合  // * &amp;#34;ジンオウガはまだまだ元気だ！&amp;#34;とコンソールに表示  // [期待]  // - ジンオウガのhpは0なので、&amp;#34;ジンオウガを倒した！&amp;#34;が表示されて欲しい  int zinogre_hp = 0; if(zinogre_hp &amp;lt; 500){ Debug.</description>
    </item>
    
    <item>
      <title>第三回「条件分岐２」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220116/</link>
      <pubDate>Sun, 16 Jan 2022 01:26:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220116/</guid>
      <description>概要  場所  Discoards   日時  2022/01/16 10:00 - 12:18   お題  「変数」の復習 「条件分岐」の復習 いろんな「条件分岐」    詳細 前回の復習 書いてみよう void Start() { // 問題1 ：int型の変数rathian_hpを定義し、5000を代入しよう。(1行で表現しよう)  // 問題2 ：string型の変数message_1を定義し、&amp;#34;リオレウスをやっつけた！&amp;#34;を代入しよう。(1行で表現しよう)  // 問題3 ：変数message_1をコンソールに表示しよう  // 問題4 ：変数rathian_hpがもし0以下の数字だったら、変数message_1をコンソールに表示する条件文を書こう。  // ヒント : if( rathian_hp ?? 0 ){  // ???????????????????????;  // }  } if文続き void Start() { // 問題5 ：条件に当てはまる場合は○○、当てはまらない場合はxxとしたい場合、elseを使う  // これを使って相手を倒せなかった場合に「まだまだ元気だ！」を表示させるようにしよう。  // 実行する度にRandom.</description>
    </item>
    
    <item>
      <title>第二回「条件分岐」</title>
      <link>https://kkspassepied.github.io/blog/posts/20220112/</link>
      <pubDate>Wed, 12 Jan 2022 14:26:00 +0000</pubDate>
      
      <guid>https://kkspassepied.github.io/blog/posts/20220112/</guid>
      <description>概要  場所  Discoards   日時  2022/01/12 22:00 - 23:18   お題  「変数」の復習+α。 「条件分岐」について学んでみよう。    詳細 前回の復習 変数の扱い void Start() { // 問題1 ：int型の変数shukakuを定義し、尻尾の数(1)を代入しよう  // ヒント：宣言の仕方 -&amp;gt; 型 変数名(shukaku);  // ：代入の仕方 -&amp;gt; 変数名(shukaku) = 尻尾の数(1);  // 問題2 ：問題1で代入したshukakuの値をコンソールに表示しよう  // ヒント：コンソールに表示するときは、Debug.Logを使う  } エラーの修正  値を未代入 値に異なる型を代入  void Start() { // 問題3 ：intの変数kisameを定義したが、プログラミングでエラーが出てしまった。  // 上手く表示されるように修正しよう。  // ヒント：変数の宣言しかしていない場合、コンピュータは何を表示していいのか分からない。  int kisame; Debug.</description>
    </item>
    
  </channel>
</rss>
