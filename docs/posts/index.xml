<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Activity Logs</title>
		<link>https://kkspassepied.github.io/blog/posts/</link>
		<description>Recent content in Posts on Activity Logs</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 12 Jan 2022 14:26:00 +0000</lastBuildDate>
		<atom:link href="https://kkspassepied.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>第二回「条件分岐」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220112/</link>
			<pubDate>Wed, 12 Jan 2022 14:26:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220112/</guid>
			<description>概要  場所  Discoards   日時  2022/01/12 22:00 - 23:18   お題  「変数」の復習+α。 「条件分岐」について学んでみよう。    詳細 前回の復習 変数の扱い void Start() { // 問題1 ：int型の変数shukakuを定義し、尻尾の数(1)を代入しよう  // ヒント：宣言の仕方 -&amp;gt; 型 変数名(shukaku);  // ：代入の仕方 -&amp;gt; 変数名(shukaku) = 尻尾の数(1);  // 問題2 ：問題1で代入したshukakuの値をコンソールに表示しよう  // ヒント：コンソールに表示するときは、Debug.Logを使う  } エラーの修正  値を未代入 値に異なる型を代入  void Start() { // 問題3 ：intの変数kisameを定義したが、プログラミングでエラーが出てしまった。  // 上手く表示されるように修正しよう。  // ヒント：変数の宣言しかしていない場合、コンピュータは何を表示していいのか分からない。  int kisame; Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/12 22:00 - 23:18</li>
</ul>
</li>
<li>お題
<ul>
<li>「変数」の復習+α。</li>
<li>「条件分岐」について学んでみよう。</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="前回の復習">前回の復習</h3>
<h4 id="変数の扱い">変数の扱い</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題1 ：int型の変数shukakuを定義し、尻尾の数(1)を代入しよう
</span><span class="c1"></span>      <span class="c1">// ヒント：宣言の仕方 -&gt; 型 変数名(shukaku);
</span><span class="c1"></span>      <span class="c1">//       ：代入の仕方 -&gt; 変数名(shukaku) = 尻尾の数(1);
</span><span class="c1"></span>
      <span class="c1">// 問題2 ：問題1で代入したshukakuの値をコンソールに表示しよう
</span><span class="c1"></span>      <span class="c1">// ヒント：コンソールに表示するときは、Debug.Logを使う
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><h4 id="エラーの修正">エラーの修正</h4>
<ul>
<li>値を未代入</li>
<li>値に異なる型を代入</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題3 ：intの変数kisameを定義したが、プログラミングでエラーが出てしまった。
</span><span class="c1"></span>      <span class="c1">//         上手く表示されるように修正しよう。
</span><span class="c1"></span>      <span class="c1">// ヒント：変数の宣言しかしていない場合、コンピュータは何を表示していいのか分からない。
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">kisame</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">kisame</span><span class="p">);</span>

      <span class="c1">// 問題4 ：intの変数sasukeを定義し、サスケの名前を表示したかったがエラーが出てしまった。
</span><span class="c1"></span>      <span class="c1">//       : 上手く表示されるように修正しよう。
</span><span class="c1"></span>      <span class="c1">// ヒント：intには数字しかいれられない
</span><span class="c1"></span>      <span class="c1">//       ：文字列(&#34;サスケ&#34;の部分)を代入するにはstring型を使う
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">sasuke</span><span class="p">;</span>
      <span class="n">sasuke</span> <span class="p">=</span> <span class="s">&#34;サスケ&#34;</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">sasuke</span><span class="p">);</span>

    <span class="p">}</span>
</code></pre></div><h4 id="前回伝え忘れてたポイント">前回伝え忘れてたポイント</h4>
<ul>
<li>宣言と代入を同時に書ける</li>
<li>変数同士で計算ができる</li>
<li>文字列も足し算ができる</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題5 ：intの変数matatabiを定義し、尻尾の数(2)を代入しよう
</span><span class="c1"></span>      <span class="c1">//       : 宣言と代入を同時に行い、1行で表現すること
</span><span class="c1"></span>      <span class="c1">// ヒント：shukakuの場合は以下のように書ける
</span><span class="c1"></span>      <span class="c1">//       ：int shukaku = 1;
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題6 ：以下に尾獣の尻尾の数を定義した
</span><span class="c1"></span>        <span class="c1">//       : 変数tailsに、尾獣の尻尾の合計本数を代入しよう
</span><span class="c1"></span>        <span class="c1">// ヒント：変数 + 変数で足し算ができる
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">shukaku</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">matatabi</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">isobu</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">songoku</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">kokuou</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">saiken</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">chomei</span> <span class="p">=</span> <span class="m">7</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">gyuki</span> <span class="p">=</span> <span class="m">8</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">kurama</span> <span class="p">=</span> <span class="m">9</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">tails</span><span class="p">;</span>
        <span class="n">tails</span> <span class="p">=</span> <span class="p">????????????</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">tails</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題7 ：以下にナルトのセリフ文字列serifuを定義して表示させたい
</span><span class="c1"></span>        <span class="c1">//       : 変数eと変数sasukeを使って、「サスケェ・・・」というセリフを完成させよう
</span><span class="c1"></span>        <span class="c1">// ヒント：変数 + 変数で文字列を合体できる
</span><span class="c1"></span>        <span class="kt">string</span> <span class="n">e</span> <span class="p">=</span> <span class="s">&#34;ェ・・・&#34;</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">sasuke</span> <span class="p">=</span> <span class="s">&#34;サスケ&#34;</span><span class="p">;</span>

        <span class="kt">string</span> <span class="n">serifu</span><span class="p">;</span>
        <span class="n">serifu</span> <span class="p">=</span> <span class="p">????????????</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">serifu</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h3 id="条件分岐">条件分岐</h3>
<h4 id="if文">if文</h4>
<ul>
<li>プログラムでは場合によって、実行させたい処理が変わる場合がある</li>
<li>ゲームで敵を攻撃したとして
<ul>
<li>HPが0になった場合 -&gt; 相手は倒れる(ﾃﾃﾃﾃｰ)</li>
<li>HPが0にならなかった場合 -&gt; 相手はそのまま</li>
</ul>
</li>
<li>「もし○○だったらxxしたい」そういうときに使うのがif文</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題8 ：????にifの条件を書き込んで、ジンオウガをやっつけよう！
</span><span class="c1"></span>        <span class="c1">// ヒント：zinogre_hpからdamegeを引いて0以下になったら相手は倒れる
</span><span class="c1"></span>        <span class="c1">//        if(変数A &lt; 変数B)  : 変数Bが大きい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A == 変数B) : 変数Aと変数Bが等しい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A == 0)     : 変数Aと0が等しい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A &lt;= 0)     : 変数Aが0以下という条件になる
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">500</span><span class="p">;</span>    <span class="c1">// ジンオウガのHP
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">damege</span>     <span class="p">=</span> <span class="m">500</span><span class="p">;</span>    <span class="c1">// 攻撃によるダメージ
</span><span class="c1"></span>
        <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="n">zinogre_hp</span> <span class="p">-</span> <span class="n">damege</span><span class="p">;</span>
        <span class="c1">// zinogre_hp -= damege;
</span><span class="c1"></span>        <span class="c1">// でも同じ意味になります！
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(??????????){</span>
          <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガをやっつけた！&#34;</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h3 id="ポイント">ポイント</h3>
<ul>
<li><code>kisame</code>に好きな値を入れてもらったら迷わず<code>0</code>だったので(　´∀｀)bｸﾞｯ!
<ul>
<li>尾を持たない尾獣などと呼ばれていましてね・・・。</li>
</ul>
</li>
<li><code>zinogre_hp = zinogre_hp - damege;</code>の表現がピンとこない
<ul>
<li>数学的な式として捉えてしまうと500 = 0で矛盾になってしまう
<ul>
<li><code>=</code>はイコールではなく代入</li>
<li>プログラムでのイコールは<code>==</code></li>
</ul>
</li>
<li><code>zinogre_hp -= damege;</code>は一旦忘れてもらった</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2021/01/16 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第一回「Hello World」「変数」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220109/</link>
			<pubDate>Sun, 09 Jan 2022 02:26:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220109/</guid>
			<description>概要  場所  Discoards   日時  2022/01/09 09:00 - 11:10   お題  「Hello World!」「変数」について勉強しよう。    詳細 準備  VisualStudio2019にログイン  MSのアカウントがない場合は作成  GitHubアカウントでもいけるようなので、GitHubアカウントを作成した。     ペアプロのためVisualStudio2019に「Live Share」を入れてもらう  参考：MSDOC   「Live Share」をつないでみる  自分はVSCODEで実施    本編 (未)とあるところは説明しきれなかったところ。
Hello World! Hello World /* * プログラム作成、実行、確認のプロセスを知る */ void Start() { // &amp;#34;Hello World!&amp;#34;を表示  Debug.Log(&amp;#34;Hello World!&amp;#34;); } 複数行で実行 /* * プログラムは上から順番に実行される * 表示する中身の数字は関係ない */ void Start() { Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/09 09:00 - 11:10</li>
</ul>
</li>
<li>お題
<ul>
<li>「Hello World!」「変数」について勉強しよう。</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="準備">準備</h3>
<ul>
<li>VisualStudio2019にログイン
<ul>
<li>MSのアカウントがない場合は作成
<ul>
<li>GitHubアカウントでもいけるようなので、GitHubアカウントを作成した。</li>
</ul>
</li>
</ul>
</li>
<li>ペアプロのためVisualStudio2019に「Live Share」を入れてもらう
<ul>
<li><a href="https://docs.microsoft.com/ja-jp/visualstudio/liveshare/use/vs">参考：MSDOC</a></li>
</ul>
</li>
<li>「Live Share」をつないでみる
<ul>
<li>自分はVSCODEで実施</li>
</ul>
</li>
</ul>
<h3 id="本編">本編</h3>
<p>(未)とあるところは説明しきれなかったところ。</p>
<h4 id="hello-world">Hello World!</h4>
<h5 id="hello-world-1">Hello World</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * プログラム作成、実行、確認のプロセスを知る
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// &#34;Hello World!&#34;を表示
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="複数行で実行">複数行で実行</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * プログラムは上から順番に実行される
</span><span class="cm">     * 表示する中身の数字は関係ない
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;3.Hello World!&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;2.Hello World!&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;1.Hello World!&#34;</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="実行エラー">実行エラー</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * エラー時の挙動を見てみる
</span><span class="cm">     * 1. 記述は一言一句間違ってはいけない
</span><span class="cm">     *    &gt;&gt;郵便屋さんと違って、多少の間違いを受け止めてくれない
</span><span class="cm">     * 2. 行の終わりには`;`を
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 1. 定義にない関数コール
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Lo</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
        <span class="c1">// 2. ; がない
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></div><h4 id="質問">質問</h4>
<ul>
<li>Unityのシーンの画面に表示されるわけではないんですね
<ul>
<li>Yes、Debug.Logは「コンソール画面に表示してください」という命令だから</li>
</ul>
</li>
<li>Hello Worldは日本語でもOK？
<ul>
<li>OKです</li>
</ul>
</li>
</ul>
<h4 id="変数について">変数について</h4>
<h5 id="変数の宣言">変数の宣言</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * 変数は情報を保存するハコ
</span><span class="cm">     * 宣言 -&gt; 初期化 -&gt; 利用の3段活用
</span><span class="cm">     * (未)宣言と初期化は同時にできる
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 宣言
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="c1">// 代入(初期化)
</span><span class="c1"></span>      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
      <span class="c1">// 利用ゥ!
</span><span class="c1"></span>      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="計算した結果を変数に入れる">計算した結果を変数に入れる</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * int型で計算ができる
</span><span class="cm">     */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="c1">// 算数の計算ができます！
</span><span class="c1"></span>      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span> <span class="p">+</span> <span class="m">10</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="変数同士で代入">変数同士で代入</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * int型同士で代入ができる
</span><span class="cm">     * 複数の変数を定義した時の挙動に注意
</span><span class="cm">     */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">answer</span><span class="p">;</span>
      <span class="c1">// answerにnumberの数字を代入する
</span><span class="c1"></span>      <span class="n">answer</span> <span class="p">=</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">number</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span>
      <span class="c1">// numberを20にしてもanswerは10のまま
</span><span class="c1"></span>      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">answer</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="変数の宣言エラー">変数の宣言（エラー）</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * エラー時の挙動を見てみる
</span><span class="cm">     * 1. 同じ名前で変数を２つ以上作れない
</span><span class="cm">     * 2. (未)初期化を忘れない
</span><span class="cm">     * 3. 宣言した「型」の物しか入れられない
</span><span class="cm">    */</span>
    <span class="c1">// 1. 同じ変数を定義する
</span><span class="c1"></span>    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>

      <span class="c1">// 2. 宣言だけで初期化しない場合
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>

      <span class="c1">// 3. int型に文字を入れる
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span> <span class="p">=</span> <span class="s">&#34;abc&#34;</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div><h4 id="質問-1">質問</h4>
<ul>
<li>型ってなんですか？鬼滅の刃風に説明お願いします
<ul>
<li>うぐっ・・・（私全然内容知らない）
<ul>
<li>とりあえずお互いが知ってるNARUTOで説明していこうと思います</li>
<li>チャクラの性質変化で何となくな説明を行った</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="なぜ変数を使うのか">なぜ変数を使うのか？</h4>
<ul>
<li>同じものを何回も使える</li>
<li>更新される値を入れる入れ物として使う</li>
<li>どういう値なのかを名前で説明することができる</li>
</ul>
<h3 id="次回">次回</h3>
<p>2021/01/12 予定</p>
]]></content>
		</item>
		
		<item>
			<title>Kickoff</title>
			<link>https://kkspassepied.github.io/blog/posts/20211226/</link>
			<pubDate>Sun, 26 Dec 2021 12:55:33 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20211226/</guid>
			<description>場所 Discoards
日時 2021/12/26 19:50 - 21:55
お題 やってみたいこと決める。
内容 候補  ゲーム作ってみる Web開発 スマートロックとか作ってみる AI作ってみる  共通の趣味だしゲームが興味持って取り組めそう。
詳細  環境は「Unity」 参考書をベースにプログラミングの基礎を学ぶ 参考書を終えたら好きなゲーム作ってみる  宿題  GitHubのOrganizationを用意 参考書用意  次回 2021/01/09 予定</description>
			<content type="html"><![CDATA[<h3 id="場所">場所</h3>
<p>Discoards</p>
<h3 id="日時">日時</h3>
<p>2021/12/26 19:50 - 21:55</p>
<h3 id="お題">お題</h3>
<p>やってみたいこと決める。</p>
<h3 id="内容">内容</h3>
<h5 id="候補">候補</h5>
<ul>
<li>ゲーム作ってみる</li>
<li>Web開発</li>
<li>スマートロックとか作ってみる</li>
<li>AI作ってみる</li>
</ul>
<p>共通の趣味だしゲームが興味持って取り組めそう。</p>
<h5 id="詳細">詳細</h5>
<ul>
<li>環境は「Unity」</li>
<li>参考書をベースにプログラミングの基礎を学ぶ</li>
<li>参考書を終えたら好きなゲーム作ってみる</li>
</ul>
<h5 id="宿題">宿題</h5>
<ul>
<li>GitHubのOrganizationを用意</li>
<li>参考書用意</li>
</ul>
<h3 id="次回">次回</h3>
<p>2021/01/09 予定</p>
]]></content>
		</item>
		
	</channel>
</rss>
