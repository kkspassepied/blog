<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Activity Logs</title>
		<link>https://kkspassepied.github.io/blog/posts/</link>
		<description>Recent content in Posts on Activity Logs</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 27 Feb 2022 01:00:00 +0000</lastBuildDate>
		<atom:link href="https://kkspassepied.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>第八回「配列」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220227/</link>
			<pubDate>Sun, 27 Feb 2022 01:00:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220227/</guid>
			<description>概要  場所  Discoards   日時  2022/02/27 10:00 - 10:50   お題  「配列の話」    詳細 配列 void Start() { // 変数 = 1個の箱  int box = 0; // 配列 = n個の箱  // プレイヤーの名前の配列  string[] player = new string[4]; player[0] = &amp;#34;極みさん&amp;#34;; player[1] = &amp;#34;ぱすぴえ&amp;#34;; player[2] = &amp;#34;player3&amp;#34;; player[3] = &amp;#34;player4&amp;#34;; // 何かしらの回数をカウントする配列（スリンガーの回数）  int[] slinger = new int[4]; slinger[0] = 42; // 極みさん  slinger[1] = 3; // ぱすぴえ  slinger[2] = 42; // player3  slinger[3] = 23; // player4  // 実際のゲーム中ではスリンガー数をカウントしておくイメージ  // 極みさん -&amp;gt; slinger[0]++;  // ぱすぴえ -&amp;gt; slinger[1]++;  // player3 -&amp;gt; slinger[2]++;  // player4 -&amp;gt; slinger[3]++;  // 問題：スリンガー回数が一番多い人を表示しましょう（ワールドのリザルト風）  // ヒント：player[x]とslinger[x]のxは対応してある  // step1 : slinger回数の最大の数を探して、変数に入れる  int max = 0; for(int i = 0; i &amp;lt; 4; i++){ if(xxxxxxxxxxxx) { max = slinger[i]; } } // step2 : 最大の数と同じslinger回数のひとを表示する  for (int i = 0; i &amp;lt; 4; i++){ if (xxxxxxxxxxxx){ Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/02/27 10:00 - 10:50</li>
</ul>
</li>
<li>お題
<ul>
<li>「配列の話」</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="配列">配列</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#"><span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 変数 = 1個の箱
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">box</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="c1">// 配列 = n個の箱
</span><span class="c1"></span>    <span class="c1">// プレイヤーの名前の配列
</span><span class="c1"></span>    <span class="kt">string</span><span class="p">[]</span> <span class="n">player</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[</span><span class="m">4</span><span class="p">];</span>
    <span class="n">player</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;極みさん&#34;</span><span class="p">;</span>
    <span class="n">player</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;ぱすぴえ&#34;</span><span class="p">;</span>
    <span class="n">player</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;player3&#34;</span><span class="p">;</span>
    <span class="n">player</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;player4&#34;</span><span class="p">;</span>
    <span class="c1">// 何かしらの回数をカウントする配列（スリンガーの回数）
</span><span class="c1"></span>    <span class="kt">int</span><span class="p">[]</span> <span class="n">slinger</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">4</span><span class="p">];</span>
    <span class="n">slinger</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>  <span class="c1">// 極みさん
</span><span class="c1"></span>    <span class="n">slinger</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>   <span class="c1">// ぱすぴえ
</span><span class="c1"></span>    <span class="n">slinger</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>  <span class="c1">// player3
</span><span class="c1"></span>    <span class="n">slinger</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">=</span> <span class="m">23</span><span class="p">;</span>  <span class="c1">// player4
</span><span class="c1"></span>
    <span class="c1">// 実際のゲーム中ではスリンガー数をカウントしておくイメージ
</span><span class="c1"></span>    <span class="c1">//  極みさん -&gt; slinger[0]++;
</span><span class="c1"></span>    <span class="c1">//  ぱすぴえ -&gt; slinger[1]++;
</span><span class="c1"></span>    <span class="c1">//  player3  -&gt; slinger[2]++;
</span><span class="c1"></span>    <span class="c1">//  player4  -&gt; slinger[3]++;
</span><span class="c1"></span>
    <span class="c1">// 問題：スリンガー回数が一番多い人を表示しましょう（ワールドのリザルト風）
</span><span class="c1"></span>    <span class="c1">// ヒント：player[x]とslinger[x]のxは対応してある
</span><span class="c1"></span>
    <span class="c1">// step1 : slinger回数の最大の数を探して、変数に入れる
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">xxxxxxxxxxxx</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">max</span> <span class="p">=</span> <span class="n">slinger</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// step2 : 最大の数と同じslinger回数のひとを表示する
</span><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++){</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">xxxxxxxxxxxx</span><span class="p">){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">player</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+</span> <span class="s">&#34;のスリンガー回数は&#34;</span> <span class="p">+</span> <span class="n">slinger</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+</span> <span class="s">&#34;回です&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="ポイント">ポイント</h3>
<ul>
<li>ちょっとモヤッとが残ってしまった
<ul>
<li>for文を2回すのが冗長に感じてしまう</li>
<li>説明難しい</li>
<li>次回も練習問題用意してみる</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/03/02 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第七回「メソッド」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220223/</link>
			<pubDate>Wed, 23 Feb 2022 13:45:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220223/</guid>
			<description>概要  場所  Discoards   日時  2022/02/23 21:50 - 22:50   お題  「メソッドの話」    詳細 メソッド // Start is called before the first frame update  void Start() { int damage = 0; damage = longSwardDamege(1, 1, 1); Debug.Log(damage); } // Update is called once per frame  void Update() { int damage = 0; damage = longSwardDamege(2, 1, 1); Debug.Log(damage); } // 引数  // 返り値  int longSwardDamege(int nikusitsu, int buki, int kireazi) { int damage = 0; // ダメージ計算（適当）  damage = buki * nikusitsu * kireazi; return damage; } ポイント  メソッドには引数と返り値がある 引数は変数のように型を定義する  定義した型の変数しか指定できない   メソッドは返り値を設定することができる  返り血ではない   StartとUpdateの役割の話もちょっとした  実はこれもメソッドなんだよ Startはシーン再生の最初に1回 Updateは繰り返し呼ばれる  詳細     丁度いい分量だったみたい  次回 2022/02/27 予定</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/02/23 21:50 - 22:50</li>
</ul>
</li>
<li>お題
<ul>
<li>「メソッドの話」</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="メソッド">メソッド</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="c1">// Start is called before the first frame update
</span><span class="c1"></span>    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="n">damage</span> <span class="p">=</span> <span class="n">longSwardDamege</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">damage</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Update is called once per frame
</span><span class="c1"></span>    <span class="k">void</span> <span class="n">Update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="n">damage</span> <span class="p">=</span> <span class="n">longSwardDamege</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">damage</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 引数
</span><span class="c1"></span>    <span class="c1">// 返り値
</span><span class="c1"></span>    <span class="kt">int</span> <span class="n">longSwardDamege</span><span class="p">(</span><span class="kt">int</span> <span class="n">nikusitsu</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buki</span><span class="p">,</span> <span class="kt">int</span> <span class="n">kireazi</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="c1">// ダメージ計算（適当）
</span><span class="c1"></span>        <span class="n">damage</span> <span class="p">=</span> <span class="n">buki</span> <span class="p">*</span> <span class="n">nikusitsu</span> <span class="p">*</span> <span class="n">kireazi</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">damage</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div><h3 id="ポイント">ポイント</h3>
<ul>
<li>メソッドには引数と返り値がある</li>
<li>引数は変数のように型を定義する
<ul>
<li>定義した型の変数しか指定できない</li>
</ul>
</li>
<li>メソッドは返り値を設定することができる
<ul>
<li>返り血ではない</li>
</ul>
</li>
<li>StartとUpdateの役割の話もちょっとした
<ul>
<li>実はこれもメソッドなんだよ</li>
<li>Startはシーン再生の最初に1回</li>
<li>Updateは繰り返し呼ばれる
<ul>
<li><a href="https://docs.unity3d.com/ja/2018.4/Manual/ExecutionOrder.html">詳細</a></li>
</ul>
</li>
</ul>
</li>
<li>丁度いい分量だったみたい</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/02/27 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第六回「ループ文２」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220211/</link>
			<pubDate>Fri, 11 Feb 2022 12:45:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220211/</guid>
			<description>概要  場所  Discoards   日時  2022/02/11 21:45 - 22:50   お題  「ループ文」の復習と追加    詳細 ループ文復習 更新式にひと工夫 void Start() { // 問題1 : for文の復習 0~10の数字のうち、偶数を「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  // 概要 : for([変数の定義]; [条件分岐の条件]; [変数の更新]){  } for文とif文 void Start() { // 問題2 : for文の復習 1~10の数字のうち、偶数について「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  // : ※問題1とは異なりif文を使って、特定条件時のみ表示させる  // : a % b = (a/bの割り算のあまり)  // : 偶数は２で割り切れる数、つまり・・・  // 概要 : for([変数の定義]; [条件分岐の条件]; [変数の更新]){  for(int i = 0; i &amp;lt; 10; i++){ } } continue void Start() { // 問題3 : continueを使うと、ループの開始地点にワープしてループを一つ進める  // : continueを使って、1~10の数字のうち、偶数について「+i+&amp;#34;は偶数です&amp;#34;」と表示しよう  for(int i = 0; i &amp;lt; 10; i++){ if(?</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/02/11 21:45 - 22:50</li>
</ul>
</li>
<li>お題
<ul>
<li>「ループ文」の復習と追加</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="ループ文復習">ループ文復習</h3>
<h4 id="更新式にひと工夫">更新式にひと工夫</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題1 : for文の復習 0~10の数字のうち、偶数を「+i+&#34;は偶数です&#34;」と表示しよう
</span><span class="c1"></span>        <span class="c1">// 概要  : for([変数の定義]; [条件分岐の条件]; [変数の更新]){
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><h4 id="for文とif文">for文とif文</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題2 : for文の復習 1~10の数字のうち、偶数について「+i+&#34;は偶数です&#34;」と表示しよう
</span><span class="c1"></span>        <span class="c1">//       : ※問題1とは異なりif文を使って、特定条件時のみ表示させる
</span><span class="c1"></span>        <span class="c1">//       : 　a % b = (a/bの割り算のあまり)
</span><span class="c1"></span>        <span class="c1">//       :   偶数は２で割り切れる数、つまり・・・
</span><span class="c1"></span>        <span class="c1">// 概要  : for([変数の定義]; [条件分岐の条件]; [変数の更新]){
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++){</span>

        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="continue">continue</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題3 : continueを使うと、ループの開始地点にワープしてループを一つ進める
</span><span class="c1"></span>        <span class="c1">//       : continueを使って、1~10の数字のうち、偶数について「+i+&#34;は偶数です&#34;」と表示しよう
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++){</span>
            <span class="k">if</span><span class="p">(???????????){</span>
                <span class="p">???????????;</span>
            <span class="p">}</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(+</span><span class="n">i</span><span class="p">+</span><span class="s">&#34;は偶数です&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="カウントダウン">カウントダウン</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題4 : 今まで0 ,1, 2...という順番だったが、逆に10, 9, 8...で0までカウントしよう
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;カウントダウンします&#34;</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(??????????????????????){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="カウントダウン中止">カウントダウン中止</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題5 : breakを使うと、ループ文を中止して抜ける事ができる
</span><span class="c1"></span>        <span class="c1">//       : カウントダウン6, 5, 4 .... ループ文を抜けよう
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;カウントダウンします&#34;</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(??????????????????????){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(+</span><span class="n">i</span><span class="p">+);</span>
            <span class="k">if</span><span class="p">(??????????????????){</span>
                <span class="p">??????????????????????;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="ポイント">ポイント</h4>
<ul>
<li><code>continue</code>の利用価値が分からない
<ul>
<li>確かにこの例だと分からない。今度までにいい感じの例を考えてくる</li>
<li>冗長であることを指摘できるのはいいね！</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/02/16 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第五回「ループ文」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220130/</link>
			<pubDate>Sun, 30 Jan 2022 00:45:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220130/</guid>
			<description>概要  場所  Discoards   日時  2022/01/30 10:00 - 12:56   お題  「ループ文」    詳細 ループ文とは こんな形 void Start() { // 問題1 : for文の構成を知ろう  // 概要 : for文とは、条件を満たしている間同じ処理を繰り返す文です。  // : 書き方は、今までにやった「変数」と「条件分岐」を組み合わせたような感じ  // for([変数の定義]; [条件分岐の条件]; [変数の更新]){  for(int i = 0; i &amp;lt; 10; i++){ Debug.Log(&amp;#34;for文のループ&amp;#34;+i+&amp;#34;回目です&amp;#34;); } } ループでできること // 問題2 : for文でタイマーを作ってみよう  // ポイント : プログラムのカウントは0から行う事を意識  // ： 理解のためStartに実装、Updateの話はまた後  using System.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/30 10:00 - 12:56</li>
</ul>
</li>
<li>お題
<ul>
<li>「ループ文」</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="ループ文とは">ループ文とは</h3>
<h4 id="こんな形">こんな形</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題1 : for文の構成を知ろう
</span><span class="c1"></span>        <span class="c1">// 概要  : for文とは、条件を満たしている間同じ処理を繰り返す文です。
</span><span class="c1"></span>        <span class="c1">//       : 書き方は、今までにやった「変数」と「条件分岐」を組み合わせたような感じ
</span><span class="c1"></span>        <span class="c1">//         for([変数の定義]; [条件分岐の条件]; [変数の更新]){
</span><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;for文のループ&#34;</span><span class="p">+</span><span class="n">i</span><span class="p">+</span><span class="s">&#34;回目です&#34;</span><span class="p">);</span>
        <span class="p">}</span>        
    <span class="p">}</span>
</code></pre></div><h4 id="ループでできること">ループでできること</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="c1">// 問題2    : for文でタイマーを作ってみよう
</span><span class="c1"></span>    <span class="c1">// ポイント : プログラムのカウントは0から行う事を意識
</span><span class="c1"></span>    <span class="c1">//         ： 理解のためStartに実装、Updateの話はまた後
</span><span class="c1"></span>    <span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Variable</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
    <span class="p">{</span>
        <span class="k">async</span> <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
                <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(+</span> <span class="p">(</span><span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span> <span class="s">&#34;秒経過しました&#34;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="ループを途中で止めたい場合">ループを途中で止めたい場合</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">async</span> <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題3    : 制限時間内(60秒以内)にジンオウガを倒すループ分を作ろう
</span><span class="c1"></span>        <span class="c1">// ポイント : 途中で倒したらbreakする！
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">6000</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span> <span class="p">????????????????</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(+</span> <span class="p">(</span><span class="n">i</span><span class="p">+</span><span class="m">1</span><span class="p">)</span> <span class="p">+</span><span class="s">&#34;秒経過&#34;</span><span class="p">);</span>
            <span class="n">damage</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">300</span><span class="p">,</span> <span class="m">600</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>    <span class="c1">// 攻撃によるダメージ
</span><span class="c1"></span>            <span class="n">zinogre_hp</span> <span class="p">-=</span> <span class="n">damage</span><span class="p">;</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">damage</span> <span class="p">+</span> <span class="s">&#34;のダメージを与えた！ジンオウガの残りHPは&#34;</span> <span class="p">+</span> <span class="n">zinogre_hp</span> <span class="p">+</span> <span class="s">&#34;だ！&#34;</span><span class="p">);</span>

            <span class="c1">// 倒せていたら「倒した」を出力してループを抜けよう
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span> <span class="p">????????????????</span> <span class="p">)</span>
            <span class="p">{</span>

            <span class="p">}</span>

            <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="n">Delay</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="ポイント">ポイント</h4>
<ul>
<li>Start内でfor文を使ってゲームの処理を説明するのは、Unityとしてはあまり適切ではないが、とりあえず我慢。</li>
<li>for文の()の中身は今までの組み合わせなのですんなり
<ul>
<li>更新式がループのあとで実行されるところを伝え忘れてた</li>
<li>プログラムでは0から始めること</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/02/06 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第四回「これまでの復習」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220123/</link>
			<pubDate>Wed, 26 Jan 2022 12:49:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220123/</guid>
			<description>概要  場所  Discoards   日時  2022/01/26 21:45 - 22:56   お題  「変数」の復習 「条件分岐」の復習    詳細 前回の復習 書いてみよう void Start() { // 問題1 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 zinogre_hpを定義し5000を代入  // - int型の変数 rathian_hpを定義し5000を代入  // [条件分岐]  // - zinogre_hpとrathian_hpが同じHPの場合  // * &amp;#34;HPは互角だ！&amp;#34;とコンソールに表示  // - どちらかのhpが高い場合  // * &amp;#34;XXXX(モンスター名)の方が強い！&amp;#34;とコンソールに表示  } void Start() { // 問題2 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 otoshianaを定義し1を代入  // - int型の変数 sibirewanaを定義し1を代入  // [条件分岐]  // - otoshianaが0の場合  // * 何も表示しない  // - otoshianaが0以外の場合  // * &amp;#34;罠にかかっている！&amp;#34;とコンソールに表示しよう  // - sibirewanaが0の場合  // * 何も表示しない  // - sibirewanaが0以外の場合  // * &amp;#34;罠にかかっている！&amp;#34;とコンソールに表示しよう  // [注意]  // * &amp;#34;罠にかかっている！&amp;#34;は１回だけコンソールに表示されるようにしよう  } void Start() { // 問題3 : 以下の条件を満たすプログラムを作ろう！  // [変数]  // - int型の変数 zinogre_hpを定義し50を代入  // - int型の変数 masuiを定義し2を代入  // - int型の変数 trappingを定義し1を代入  // - int型の変数 otoshianaを定義し1を代入  // - int型の変数 sibirewanaを定義し0を代入  // [条件分岐]  // - ziogre_hpが50未満かつ、masuiが2以上かつ、trappingが１と等しい、otoshianaまたはsibirewanaが1と等しい場合  // * &amp;#34;ジンオウガを捕獲した！&amp;#34;とコンソールに表示しよう  // - 条件を満たさない場合  // * &amp;#34;まだ捕獲できない！&amp;#34;とコンソールに表示しよう  } 間違い探し void Start() { // 問題4 : 以下の条件を満たすプログラムを作ったつもりだったが、  // 期待通りの出力が出なかった。間違いを指摘しよう。  // [変数]  // - int型の変数 zinogre_hpを定義し0を代入  // [条件分岐]  // - zinogre_hpが500未満の時  // * &amp;#34;ジンオウガは捕獲可能だ！&amp;#34;とコンソールに表示  // - zinogre_hpが0以下の時  // * &amp;#34;ジンオウガを倒した！&amp;#34;とコンソールに表示  // - それ以外の場合  // * &amp;#34;ジンオウガはまだまだ元気だ！&amp;#34;とコンソールに表示  // [期待]  // - ジンオウガのhpは0なので、&amp;#34;ジンオウガを倒した！&amp;#34;が表示されて欲しい  int zinogre_hp = 0; if(zinogre_hp &amp;lt; 500){ Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/26 21:45 - 22:56</li>
</ul>
</li>
<li>お題
<ul>
<li>「変数」の復習</li>
<li>「条件分岐」の復習</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="前回の復習">前回の復習</h3>
<h4 id="書いてみよう">書いてみよう</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題1 : 以下の条件を満たすプログラムを作ろう！
</span><span class="c1"></span>        <span class="c1">// [変数]
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 zinogre_hpを定義し5000を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 rathian_hpを定義し5000を代入
</span><span class="c1"></span>        <span class="c1">// [条件分岐]
</span><span class="c1"></span>        <span class="c1">//   - zinogre_hpとrathian_hpが同じHPの場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;HPは互角だ！&#34;とコンソールに表示
</span><span class="c1"></span>        <span class="c1">//   - どちらかのhpが高い場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;XXXX(モンスター名)の方が強い！&#34;とコンソールに表示
</span><span class="c1"></span>        
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題2 : 以下の条件を満たすプログラムを作ろう！
</span><span class="c1"></span>        <span class="c1">// [変数]
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 otoshianaを定義し1を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 sibirewanaを定義し1を代入
</span><span class="c1"></span>        <span class="c1">// [条件分岐]
</span><span class="c1"></span>        <span class="c1">//   - otoshianaが0の場合
</span><span class="c1"></span>        <span class="c1">//     * 何も表示しない
</span><span class="c1"></span>        <span class="c1">//   - otoshianaが0以外の場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;罠にかかっている！&#34;とコンソールに表示しよう
</span><span class="c1"></span>        <span class="c1">//   - sibirewanaが0の場合
</span><span class="c1"></span>        <span class="c1">//     * 何も表示しない
</span><span class="c1"></span>        <span class="c1">//   - sibirewanaが0以外の場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;罠にかかっている！&#34;とコンソールに表示しよう
</span><span class="c1"></span>        <span class="c1">// [注意]
</span><span class="c1"></span>        <span class="c1">//     * &#34;罠にかかっている！&#34;は１回だけコンソールに表示されるようにしよう
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題3 : 以下の条件を満たすプログラムを作ろう！
</span><span class="c1"></span>        <span class="c1">// [変数]
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 zinogre_hpを定義し50を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 masuiを定義し2を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 trappingを定義し1を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 otoshianaを定義し1を代入
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 sibirewanaを定義し0を代入
</span><span class="c1"></span>        <span class="c1">// [条件分岐]
</span><span class="c1"></span>        <span class="c1">//   - ziogre_hpが50未満かつ、masuiが2以上かつ、trappingが１と等しい、otoshianaまたはsibirewanaが1と等しい場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;ジンオウガを捕獲した！&#34;とコンソールに表示しよう
</span><span class="c1"></span>        <span class="c1">//   - 条件を満たさない場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;まだ捕獲できない！&#34;とコンソールに表示しよう
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><h4 id="間違い探し">間違い探し</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題4 : 以下の条件を満たすプログラムを作ったつもりだったが、
</span><span class="c1"></span>        <span class="c1">//         期待通りの出力が出なかった。間違いを指摘しよう。
</span><span class="c1"></span>        <span class="c1">// [変数]
</span><span class="c1"></span>        <span class="c1">//   - int型の変数 zinogre_hpを定義し0を代入
</span><span class="c1"></span>        <span class="c1">// [条件分岐]
</span><span class="c1"></span>        <span class="c1">//   - zinogre_hpが500未満の時
</span><span class="c1"></span>        <span class="c1">//     * &#34;ジンオウガは捕獲可能だ！&#34;とコンソールに表示
</span><span class="c1"></span>        <span class="c1">//   - zinogre_hpが0以下の時
</span><span class="c1"></span>        <span class="c1">//     * &#34;ジンオウガを倒した！&#34;とコンソールに表示
</span><span class="c1"></span>        <span class="c1">//   - それ以外の場合
</span><span class="c1"></span>        <span class="c1">//     * &#34;ジンオウガはまだまだ元気だ！&#34;とコンソールに表示
</span><span class="c1"></span>        <span class="c1">// [期待]
</span><span class="c1"></span>        <span class="c1">//   - ジンオウガのhpは0なので、&#34;ジンオウガを倒した！&#34;が表示されて欲しい
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="n">zinogre_hp</span> <span class="p">&lt;</span> <span class="m">500</span><span class="p">){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガは捕獲可能だ！&#34;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">zinogre_hp</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガを倒した！&#34;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガはまだまだ元気だ！&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="ポイント">ポイント</h4>
<ul>
<li>久しぶりにやったがしっかり覚えていた</li>
<li>条件分岐のバグを作りやすいところを重点的に
<ul>
<li>今回でif文はOKだと思った</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/01/30 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第三回「条件分岐２」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220116/</link>
			<pubDate>Sun, 16 Jan 2022 01:26:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220116/</guid>
			<description>概要  場所  Discoards   日時  2022/01/16 10:00 - 12:18   お題  「変数」の復習 「条件分岐」の復習 いろんな「条件分岐」    詳細 前回の復習 書いてみよう void Start() { // 問題1 ：int型の変数rathian_hpを定義し、5000を代入しよう。(1行で表現しよう)  // 問題2 ：string型の変数message_1を定義し、&amp;#34;リオレウスをやっつけた！&amp;#34;を代入しよう。(1行で表現しよう)  // 問題3 ：変数message_1をコンソールに表示しよう  // 問題4 ：変数rathian_hpがもし0以下の数字だったら、変数message_1をコンソールに表示する条件文を書こう。  // ヒント : if( rathian_hp ?? 0 ){  // ???????????????????????;  // }  } if文続き void Start() { // 問題5 ：条件に当てはまる場合は○○、当てはまらない場合はxxとしたい場合、elseを使う  // これを使って相手を倒せなかった場合に「まだまだ元気だ！」を表示させるようにしよう。  // 実行する度にRandom.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/16 10:00 - 12:18</li>
</ul>
</li>
<li>お題
<ul>
<li>「変数」の復習</li>
<li>「条件分岐」の復習</li>
<li>いろんな「条件分岐」</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="前回の復習">前回の復習</h3>
<h4 id="書いてみよう">書いてみよう</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題1 ：int型の変数rathian_hpを定義し、5000を代入しよう。(1行で表現しよう)
</span><span class="c1"></span>
        <span class="c1">// 問題2 ：string型の変数message_1を定義し、&#34;リオレウスをやっつけた！&#34;を代入しよう。(1行で表現しよう)
</span><span class="c1"></span>
        <span class="c1">// 問題3 ：変数message_1をコンソールに表示しよう
</span><span class="c1"></span>
        <span class="c1">// 問題4 ：変数rathian_hpがもし0以下の数字だったら、変数message_1をコンソールに表示する条件文を書こう。
</span><span class="c1"></span>        <span class="c1">// ヒント : if( rathian_hp ?? 0 ){
</span><span class="c1"></span>        <span class="c1">//              ???????????????????????;
</span><span class="c1"></span>        <span class="c1">//          }
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><h4 id="if文続き">if文続き</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題5 ：条件に当てはまる場合は○○、当てはまらない場合はxxとしたい場合、elseを使う
</span><span class="c1"></span>        <span class="c1">//         これを使って相手を倒せなかった場合に「まだまだ元気だ！」を表示させるようにしよう。
</span><span class="c1"></span>        <span class="c1">//         実行する度にRandom.Rangeでダメージ値を300 - 600 の間でランダムに設定する
</span><span class="c1"></span>        <span class="c1">//         複数回実行してすべての条件に入ることを確認してみよう
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">500</span><span class="p">;</span>                       <span class="c1">// ジンオウガのHP
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">300</span><span class="p">,</span> <span class="m">600</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>    <span class="c1">// 攻撃によるダメージ
</span><span class="c1"></span>
        <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="n">zinogre_hp</span> <span class="p">-</span> <span class="n">damage</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">damage</span><span class="p">+</span><span class="s">&#34;のダメージを与えた！&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガの残りHPは&#34;</span><span class="p">+</span><span class="n">zinogre_hp</span><span class="p">+</span><span class="s">&#34;だ！&#34;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">zinogre_hp</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガをやっつけた！&#34;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガはまだまだ元気だ！&#34;</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題6 ：else文に慣れよう
</span><span class="c1"></span>        <span class="c1">//         お肉が上手く焼けなかった時に、&#34;コゲ肉になった・・・&#34;を表示しよう
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">oniku_yaketa</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>        <span class="c1">// お肉が焼けたかどうか(0 か 1ランダム)
</span><span class="c1"></span>
        <span class="k">if</span> <span class="p">(</span><span class="n">oniku_yaketa</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;上手に焼けました！&#34;</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題7 ：３つ以上の分岐を作りたくなる時がある
</span><span class="c1"></span>        <span class="c1">//         例えばモンハンではHPを0にすると倒せるほかに、HPが少なくなると「捕獲可能」という状態になる
</span><span class="c1"></span>        <span class="c1">//         体力が100未満になると捕獲可能になるとした場合の条件分岐は以下のように書ける
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">500</span><span class="p">;</span>                       <span class="c1">// ジンオウガのHP
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">damage</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">300</span><span class="p">,</span> <span class="m">600</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>    <span class="c1">// 攻撃によるダメージ
</span><span class="c1"></span>
        <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="n">zinogre_hp</span> <span class="p">-</span> <span class="n">damage</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">damage</span><span class="p">+</span><span class="s">&#34;のダメージを与えた！&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガの残りHPは&#34;</span><span class="p">+</span><span class="n">zinogre_hp</span><span class="p">+</span><span class="s">&#34;だ！&#34;</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">zinogre_hp</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガをやっつけた！&#34;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">zinogre_hp</span> <span class="p">&lt;</span> <span class="m">100</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガは捕獲可能だ！&#34;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガはまだまだ元気だ！&#34;</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題8：else if文に慣れよう
</span><span class="c1"></span>        <span class="c1">//        oniku_yaketaはランダムに0 - 7 が代入される
</span><span class="c1"></span>        <span class="c1">//          0の時 : &#34;生肉だ・・・&#34;
</span><span class="c1"></span>        <span class="c1">//          1の時 : &#34;生焼け肉だ・・・&#34;
</span><span class="c1"></span>        <span class="c1">//          2の時 : &#34;上手に焼けました！&#34;
</span><span class="c1"></span>        <span class="c1">//          3の時 : &#34;ウルトラ上手に焼けました！&#34;
</span><span class="c1"></span>        <span class="c1">// 4, 5, 6, 7の時 : &#34;コゲ肉だ・・・&#34;
</span><span class="c1"></span>        <span class="c1">//        に分岐するif文を書いてみよう
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">oniku_yaketa</span> <span class="p">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">7</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>        <span class="c1">// お肉の焼け具合(0 - 7のランダム)
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題9：if文の条件の書き方について勉強しよう
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">ginogre_hp</span> <span class="p">=</span> <span class="m">5000</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ginogre_hp</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガをやっつけた！&#34;</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// ジンオウガを捕獲したい場合はif文でどう書ける？
</span><span class="c1"></span>        <span class="c1">//  - HPが100未満になる
</span><span class="c1"></span>        <span class="c1">//  - 罠にかけている
</span><span class="c1"></span>        <span class="c1">//  - 捕獲用麻酔玉を２つあてる
</span><span class="c1"></span>        <span class="c1">// ヒント: if( ginogre_hp &lt; 100 &amp;&amp; traping == 1 ){
</span><span class="c1"></span>        <span class="c1">//             hogehoge();
</span><span class="c1"></span>        <span class="c1">//         }
</span><span class="c1"></span>        <span class="c1">//         &amp;&amp;で条件を複数つなげられる
</span><span class="c1"></span>        <span class="n">ginogre_hp</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span>    <span class="c1">// 20 -&gt; ジンオウガのHPが20しかない
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">trapping</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>   <span class="c1">// 1  -&gt; 罠にかかっている 
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">masui</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>      <span class="c1">// 2  -&gt; 麻酔玉を２コ当てた
</span><span class="c1"></span>
        <span class="k">if</span><span class="p">(</span><span class="n">ginogre_hp</span> <span class="p">&lt;</span> <span class="m">100</span> <span class="p">&amp;&amp;</span> <span class="n">trapping</span> <span class="p">==</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="n">masui</span> <span class="p">==</span> <span class="m">2</span><span class="p">){</span>
            <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガを捕獲した！&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h4 id="ポイント">ポイント</h4>
<ul>
<li>今回は特筆するとこは特になかった
<ul>
<li>スムースな感じがうれしい</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/01/19 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第二回「条件分岐」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220112/</link>
			<pubDate>Wed, 12 Jan 2022 14:26:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220112/</guid>
			<description>概要  場所  Discoards   日時  2022/01/12 22:00 - 23:18   お題  「変数」の復習+α。 「条件分岐」について学んでみよう。    詳細 前回の復習 変数の扱い void Start() { // 問題1 ：int型の変数shukakuを定義し、尻尾の数(1)を代入しよう  // ヒント：宣言の仕方 -&amp;gt; 型 変数名(shukaku);  // ：代入の仕方 -&amp;gt; 変数名(shukaku) = 尻尾の数(1);  // 問題2 ：問題1で代入したshukakuの値をコンソールに表示しよう  // ヒント：コンソールに表示するときは、Debug.Logを使う  } エラーの修正  値を未代入 値に異なる型を代入  void Start() { // 問題3 ：intの変数kisameを定義したが、プログラミングでエラーが出てしまった。  // 上手く表示されるように修正しよう。  // ヒント：変数の宣言しかしていない場合、コンピュータは何を表示していいのか分からない。  int kisame; Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/12 22:00 - 23:18</li>
</ul>
</li>
<li>お題
<ul>
<li>「変数」の復習+α。</li>
<li>「条件分岐」について学んでみよう。</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="前回の復習">前回の復習</h3>
<h4 id="変数の扱い">変数の扱い</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題1 ：int型の変数shukakuを定義し、尻尾の数(1)を代入しよう
</span><span class="c1"></span>      <span class="c1">// ヒント：宣言の仕方 -&gt; 型 変数名(shukaku);
</span><span class="c1"></span>      <span class="c1">//       ：代入の仕方 -&gt; 変数名(shukaku) = 尻尾の数(1);
</span><span class="c1"></span>
      <span class="c1">// 問題2 ：問題1で代入したshukakuの値をコンソールに表示しよう
</span><span class="c1"></span>      <span class="c1">// ヒント：コンソールに表示するときは、Debug.Logを使う
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><h4 id="エラーの修正">エラーの修正</h4>
<ul>
<li>値を未代入</li>
<li>値に異なる型を代入</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題3 ：intの変数kisameを定義したが、プログラミングでエラーが出てしまった。
</span><span class="c1"></span>      <span class="c1">//         上手く表示されるように修正しよう。
</span><span class="c1"></span>      <span class="c1">// ヒント：変数の宣言しかしていない場合、コンピュータは何を表示していいのか分からない。
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">kisame</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">kisame</span><span class="p">);</span>

      <span class="c1">// 問題4 ：intの変数sasukeを定義し、サスケの名前を表示したかったがエラーが出てしまった。
</span><span class="c1"></span>      <span class="c1">//       : 上手く表示されるように修正しよう。
</span><span class="c1"></span>      <span class="c1">// ヒント：intには数字しかいれられない
</span><span class="c1"></span>      <span class="c1">//       ：文字列(&#34;サスケ&#34;の部分)を代入するにはstring型を使う
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">sasuke</span><span class="p">;</span>
      <span class="n">sasuke</span> <span class="p">=</span> <span class="s">&#34;サスケ&#34;</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">sasuke</span><span class="p">);</span>

    <span class="p">}</span>
</code></pre></div><h4 id="前回伝え忘れてたポイント">前回伝え忘れてたポイント</h4>
<ul>
<li>宣言と代入を同時に書ける</li>
<li>変数同士で計算ができる</li>
<li>文字列も足し算ができる</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 問題5 ：intの変数matatabiを定義し、尻尾の数(2)を代入しよう
</span><span class="c1"></span>      <span class="c1">//       : 宣言と代入を同時に行い、1行で表現すること
</span><span class="c1"></span>      <span class="c1">// ヒント：shukakuの場合は以下のように書ける
</span><span class="c1"></span>      <span class="c1">//       ：int shukaku = 1;
</span><span class="c1"></span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題6 ：以下に尾獣の尻尾の数を定義した
</span><span class="c1"></span>        <span class="c1">//       : 変数tailsに、尾獣の尻尾の合計本数を代入しよう
</span><span class="c1"></span>        <span class="c1">// ヒント：変数 + 変数で足し算ができる
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">shukaku</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">matatabi</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">isobu</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">songoku</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">kokuou</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">saiken</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">chomei</span> <span class="p">=</span> <span class="m">7</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">gyuki</span> <span class="p">=</span> <span class="m">8</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">kurama</span> <span class="p">=</span> <span class="m">9</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">tails</span><span class="p">;</span>
        <span class="n">tails</span> <span class="p">=</span> <span class="p">????????????</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">tails</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題7 ：以下にナルトのセリフ文字列serifuを定義して表示させたい
</span><span class="c1"></span>        <span class="c1">//       : 変数eと変数sasukeを使って、「サスケェ・・・」というセリフを完成させよう
</span><span class="c1"></span>        <span class="c1">// ヒント：変数 + 変数で文字列を合体できる
</span><span class="c1"></span>        <span class="kt">string</span> <span class="n">e</span> <span class="p">=</span> <span class="s">&#34;ェ・・・&#34;</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">sasuke</span> <span class="p">=</span> <span class="s">&#34;サスケ&#34;</span><span class="p">;</span>

        <span class="kt">string</span> <span class="n">serifu</span><span class="p">;</span>
        <span class="n">serifu</span> <span class="p">=</span> <span class="p">????????????</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">serifu</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h3 id="条件分岐">条件分岐</h3>
<h4 id="if文">if文</h4>
<ul>
<li>プログラムでは場合によって、実行させたい処理が変わる場合がある</li>
<li>ゲームで敵を攻撃したとして
<ul>
<li>HPが0になった場合 -&gt; 相手は倒れる(ﾃﾃﾃﾃｰ)</li>
<li>HPが0にならなかった場合 -&gt; 相手はそのまま</li>
</ul>
</li>
<li>「もし○○だったらxxしたい」そういうときに使うのがif文</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 問題8 ：????にifの条件を書き込んで、ジンオウガをやっつけよう！
</span><span class="c1"></span>        <span class="c1">// ヒント：zinogre_hpからdamegeを引いて0以下になったら相手は倒れる
</span><span class="c1"></span>        <span class="c1">//        if(変数A &lt; 変数B)  : 変数Bが大きい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A == 変数B) : 変数Aと変数Bが等しい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A == 0)     : 変数Aと0が等しい場合という条件になる
</span><span class="c1"></span>        <span class="c1">//        if(変数A &lt;= 0)     : 変数Aが0以下という条件になる
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="m">500</span><span class="p">;</span>    <span class="c1">// ジンオウガのHP
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">damege</span>     <span class="p">=</span> <span class="m">500</span><span class="p">;</span>    <span class="c1">// 攻撃によるダメージ
</span><span class="c1"></span>
        <span class="n">zinogre_hp</span> <span class="p">=</span> <span class="n">zinogre_hp</span> <span class="p">-</span> <span class="n">damege</span><span class="p">;</span>
        <span class="c1">// zinogre_hp -= damege;
</span><span class="c1"></span>        <span class="c1">// でも同じ意味になります！
</span><span class="c1"></span>        <span class="k">if</span><span class="p">(??????????){</span>
          <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;ジンオウガをやっつけた！&#34;</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div><h3 id="ポイント">ポイント</h3>
<ul>
<li><code>kisame</code>に好きな値を入れてもらったら迷わず<code>0</code>だったので(　´∀｀)bｸﾞｯ!
<ul>
<li>尾を持たない尾獣などと呼ばれていましてね・・・。</li>
</ul>
</li>
<li><code>zinogre_hp = zinogre_hp - damege;</code>の表現がピンとこない
<ul>
<li>数学的な式として捉えてしまうと500 = 0で矛盾になってしまう
<ul>
<li><code>=</code>はイコールではなく代入</li>
<li>プログラムでのイコールは<code>==</code></li>
</ul>
</li>
<li><code>zinogre_hp -= damege;</code>は一旦忘れてもらった</li>
</ul>
</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/01/16 予定</p>
]]></content>
		</item>
		
		<item>
			<title>第一回「Hello World」「変数」</title>
			<link>https://kkspassepied.github.io/blog/posts/20220109/</link>
			<pubDate>Sun, 09 Jan 2022 02:26:00 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20220109/</guid>
			<description>概要  場所  Discoards   日時  2022/01/09 09:00 - 11:10   お題  「Hello World!」「変数」について勉強しよう。    詳細 準備  VisualStudio2019にログイン  MSのアカウントがない場合は作成  GitHubアカウントでもいけるようなので、GitHubアカウントを作成した。     ペアプロのためVisualStudio2019に「Live Share」を入れてもらう  参考：MSDOC   「Live Share」をつないでみる  自分はVSCODEで実施    本編 (未)とあるところは説明しきれなかったところ。
Hello World! Hello World /* * プログラム作成、実行、確認のプロセスを知る */ void Start() { // &amp;#34;Hello World!&amp;#34;を表示  Debug.Log(&amp;#34;Hello World!&amp;#34;); } 複数行で実行 /* * プログラムは上から順番に実行される * 表示する中身の数字は関係ない */ void Start() { Debug.</description>
			<content type="html"><![CDATA[<h2 id="概要">概要</h2>
<ul>
<li>場所
<ul>
<li>Discoards</li>
</ul>
</li>
<li>日時
<ul>
<li>2022/01/09 09:00 - 11:10</li>
</ul>
</li>
<li>お題
<ul>
<li>「Hello World!」「変数」について勉強しよう。</li>
</ul>
</li>
</ul>
<h2 id="詳細">詳細</h2>
<h3 id="準備">準備</h3>
<ul>
<li>VisualStudio2019にログイン
<ul>
<li>MSのアカウントがない場合は作成
<ul>
<li>GitHubアカウントでもいけるようなので、GitHubアカウントを作成した。</li>
</ul>
</li>
</ul>
</li>
<li>ペアプロのためVisualStudio2019に「Live Share」を入れてもらう
<ul>
<li><a href="https://docs.microsoft.com/ja-jp/visualstudio/liveshare/use/vs">参考：MSDOC</a></li>
</ul>
</li>
<li>「Live Share」をつないでみる
<ul>
<li>自分はVSCODEで実施</li>
</ul>
</li>
</ul>
<h3 id="本編">本編</h3>
<p>(未)とあるところは説明しきれなかったところ。</p>
<h4 id="hello-world">Hello World!</h4>
<h5 id="hello-world-1">Hello World</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * プログラム作成、実行、確認のプロセスを知る
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// &#34;Hello World!&#34;を表示
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="複数行で実行">複数行で実行</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * プログラムは上から順番に実行される
</span><span class="cm">     * 表示する中身の数字は関係ない
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;3.Hello World!&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;2.Hello World!&#34;</span><span class="p">);</span>
        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;1.Hello World!&#34;</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="実行エラー">実行エラー</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * エラー時の挙動を見てみる
</span><span class="cm">     * 1. 記述は一言一句間違ってはいけない
</span><span class="cm">     *    &gt;&gt;郵便屋さんと違って、多少の間違いを受け止めてくれない
</span><span class="cm">     * 2. 行の終わりには`;`を
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 1. 定義にない関数コール
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Lo</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
        <span class="c1">// 2. ; がない
</span><span class="c1"></span>        <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></div><h4 id="質問">質問</h4>
<ul>
<li>Unityのシーンの画面に表示されるわけではないんですね
<ul>
<li>Yes、Debug.Logは「コンソール画面に表示してください」という命令だから</li>
</ul>
</li>
<li>Hello Worldは日本語でもOK？
<ul>
<li>OKです</li>
</ul>
</li>
</ul>
<h4 id="変数について">変数について</h4>
<h5 id="変数の宣言">変数の宣言</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * 変数は情報を保存するハコ
</span><span class="cm">     * 宣言 -&gt; 初期化 -&gt; 利用の3段活用
</span><span class="cm">     * (未)宣言と初期化は同時にできる
</span><span class="cm">    */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="c1">// 宣言
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="c1">// 代入(初期化)
</span><span class="c1"></span>      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
      <span class="c1">// 利用ゥ!
</span><span class="c1"></span>      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="計算した結果を変数に入れる">計算した結果を変数に入れる</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * int型で計算ができる
</span><span class="cm">     */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="c1">// 算数の計算ができます！
</span><span class="c1"></span>      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span> <span class="p">+</span> <span class="m">10</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="変数同士で代入">変数同士で代入</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * int型同士で代入ができる
</span><span class="cm">     * 複数の変数を定義した時の挙動に注意
</span><span class="cm">     */</span>
    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">number</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">answer</span><span class="p">;</span>
      <span class="c1">// answerにnumberの数字を代入する
</span><span class="c1"></span>      <span class="n">answer</span> <span class="p">=</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">number</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span>
      <span class="c1">// numberを20にしてもanswerは10のまま
</span><span class="c1"></span>      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">answer</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><h5 id="変数の宣言エラー">変数の宣言（エラー）</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C#" data-lang="C#">    <span class="cm">/*
</span><span class="cm">     * エラー時の挙動を見てみる
</span><span class="cm">     * 1. 同じ名前で変数を２つ以上作れない
</span><span class="cm">     * 2. (未)初期化を忘れない
</span><span class="cm">     * 3. 宣言した「型」の物しか入れられない
</span><span class="cm">    */</span>
    <span class="c1">// 1. 同じ変数を定義する
</span><span class="c1"></span>    <span class="k">void</span> <span class="n">Start</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>

      <span class="c1">// 2. 宣言だけで初期化しない場合
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span><span class="p">;</span>
      <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>

      <span class="c1">// 3. int型に文字を入れる
</span><span class="c1"></span>      <span class="kt">int</span> <span class="n">number</span> <span class="p">=</span> <span class="s">&#34;abc&#34;</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div><h4 id="質問-1">質問</h4>
<ul>
<li>型ってなんですか？鬼滅の刃風に説明お願いします
<ul>
<li>うぐっ・・・（私全然内容知らない）
<ul>
<li>とりあえずお互いが知ってるNARUTOで説明していこうと思います</li>
<li>チャクラの性質変化で何となくな説明を行った</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="なぜ変数を使うのか">なぜ変数を使うのか？</h4>
<ul>
<li>同じものを何回も使える</li>
<li>更新される値を入れる入れ物として使う</li>
<li>どういう値なのかを名前で説明することができる</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/01/12 予定</p>
]]></content>
		</item>
		
		<item>
			<title>Kickoff</title>
			<link>https://kkspassepied.github.io/blog/posts/20211226/</link>
			<pubDate>Sun, 26 Dec 2021 12:55:33 +0000</pubDate>
			
			<guid>https://kkspassepied.github.io/blog/posts/20211226/</guid>
			<description>場所 Discoards
日時 2022/12/26 19:50 - 21:55
お題 やってみたいこと決める。
内容 候補  ゲーム作ってみる Web開発 スマートロックとか作ってみる AI作ってみる  共通の趣味だしゲームが興味持って取り組めそう。
詳細  環境は「Unity」 参考書をベースにプログラミングの基礎を学ぶ 参考書を終えたら好きなゲーム作ってみる  宿題  GitHubのOrganizationを用意 参考書用意  次回 2022/01/09 予定</description>
			<content type="html"><![CDATA[<h3 id="場所">場所</h3>
<p>Discoards</p>
<h3 id="日時">日時</h3>
<p>2022/12/26 19:50 - 21:55</p>
<h3 id="お題">お題</h3>
<p>やってみたいこと決める。</p>
<h3 id="内容">内容</h3>
<h5 id="候補">候補</h5>
<ul>
<li>ゲーム作ってみる</li>
<li>Web開発</li>
<li>スマートロックとか作ってみる</li>
<li>AI作ってみる</li>
</ul>
<p>共通の趣味だしゲームが興味持って取り組めそう。</p>
<h5 id="詳細">詳細</h5>
<ul>
<li>環境は「Unity」</li>
<li>参考書をベースにプログラミングの基礎を学ぶ</li>
<li>参考書を終えたら好きなゲーム作ってみる</li>
</ul>
<h5 id="宿題">宿題</h5>
<ul>
<li>GitHubのOrganizationを用意</li>
<li>参考書用意</li>
</ul>
<h3 id="次回">次回</h3>
<p>2022/01/09 予定</p>
]]></content>
		</item>
		
	</channel>
</rss>
